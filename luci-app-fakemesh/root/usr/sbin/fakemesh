#!/bin/sh

. /lib/functions.sh
. /lib/functions/network.sh

config_load fakemesh

config_get_bool enabled default 'enabled' '0'

test $enabled -eq 0 && {
	rm -rf /tmp/fakemesh_lck*
	uci delete wireless.meshx0 >/dev/null 2>&1
	uci delete wireless.meshx1 >/dev/null 2>&1

	uci set dhcp.lan.ignore='0'
	uci delete dhcp.meshx0 >/dev/null 2>&1
	uci delete network.meshx0 >/dev/null 2>&1
	uci delete firewall.fakemesh >/dev/null 2>&1
	sed -i "/.* controller.fakemesh/d" /etc/hosts
	sed -i "/sh \/usr\/share\/fakemesh\/firewall.include.*/d" /etc/firewall.include

	uci commit wireless
	uci commit dhcp
	uci commit network
	/etc/init.d/network reload
	/etc/init.d/dnsmasq reload
	/etc/init.d/firewall restart >/dev/null 2>&1
	exit 0
}

config_get role default 'role' 'agent'
config_get band default 'band' '5g'
config_get id default 'id'
config_get key default 'key'
config_get access_ip default 'access_ip' '10.10.10.1'

agent_keep_alive()
{
	sta_lost=0

	wbandstr=$(uci show wireless | grep =\'${band}\'$ | head -n1)
	radio=$(echo $wbandstr | cut -d\. -f2)
	channel=$(uci get wireless.${radio}.channel)
	test -n "$channel" || return 1

	mkdir /tmp/fakemesh_lck2 || exit 0
	pid=$$
	touch /tmp/fakemesh_lck2/$pid

	logger -t fakemesh "agent_keep_alive($pid): started!"
	while :; do
		sleep 10
		sta="$(ubus -S list wpa_supplicant.meshx1)"
		if test -n "$sta"; then
			if [ $(iwinfo meshx1 info | grep -c 'ESSID: unknown') -ge 1 ]; then
				sta_lost=$((sta_lost+1))
				if [ "$sta_lost" -ge 3 ]; then
					logger -t fakemesh "agent_keep_alive($pid): Agent lost connection!"
					rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
					exec /usr/sbin/fakemesh agent_fix_channel &
					return 0
				fi
			elif [ "$(iwinfo meshx1 info | head -n3 | tail -n1 | awk '{print $4}')" != "$channel" ]; then
				logger -t fakemesh "agent_keep_alive($pid): Agent channel changed!"
				rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
				exec /usr/sbin/fakemesh agent_fix_channel &
				return 0
			fi
		fi
		sleep 30
		test -f /tmp/fakemesh_lck2/$pid || return 0
	done

	rm -f /tmp/fakemesh_lck2/$pid; rmdir /tmp/fakemesh_lck2
}

agent_fix_channel()
{
	[ "$role" = "agent" ] || exit 0

	wbandstr=$(uci show wireless | grep =\'${band}\'$ | head -n1)
	radio=$(echo $wbandstr | cut -d\. -f2)
	channel=$(uci get wireless.${radio}.channel)
	test -n "$channel" || return 1

	mkdir /tmp/fakemesh_lck1 || exit 0
	pid=$$
	touch /tmp/fakemesh_lck1/$pid

	logger -t fakemesh "agent_fix_channel($pid): started!"
	while :; do
		sleep 10
		sta="$(ubus -S list wpa_supplicant.meshx1)"
		if test -n "$sta"; then
			chan=$(iwinfo meshx0 scan | grep -A1 -B1 "ESSID: \"${id}\"" | head -n3 | tail -n1 | awk '{print $4}')
			if test -n "$chan"; then
				if [ "$chan" != "$channel" ]; then
					logger -t fakemesh "agent_fix_channel($pid): Setting up channel ($chan) for ${radio}"
					uci set wireless.${radio}.channel="$chan"
					uci commit wireless
					/etc/init.d/network reload &
				fi
				logger -t fakemesh "agent_fix_channel($pid): Channel ($chan) for ${radio} ready!"
				break
			fi
		fi
		sleep 20
		test -f /tmp/fakemesh_lck1/$pid || return 0
	done

	rm -f /tmp/fakemesh_lck1/$pid; rmdir /tmp/fakemesh_lck1

	exec /usr/sbin/fakemesh agent_keep_alive &
}

[ "x$1" = "xagent_fix_channel" ] && {
	agent_fix_channel
	exit 0
}

[ "x$1" = "xagent_keep_alive" ] && {
	agent_keep_alive
	exit 0
}

[ "x$1" = "xgen_config" ] && {
	# http://controller.fakemesh/fakemesh.435ca8a686ae9f07eb4eb67d2216b154
	[ "$role" = "controller" ] && {
		hash=$(echo -n $id$key | md5sum | head -c32)
		ln -s /etc/config/wireless /www/fakemesh.$hash
		for f in $(ls /www/fakemesh.*); do
			[ "$f" != "/www/fakemesh.$hash" ] && rm -f "$f"
		done
	}
	exit 0
}

test -n "$id" || {
	exit 0
}

MACADDR=""
test -e /usr/share/natcapd/board_mac.lua && MACADDR=`lua /usr/share/natcapd/board_mac.lua`
test -n "$MACADDR" || MACADDR=`cat /etc/board.json | grep macaddr | tr a-f A-F | grep -o "[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]" | head -n1`
test -n "$MACADDR" || MACADDR=`cat /sys/class/net/eth0/address | tr a-z A-Z`
test -n "$MACADDR" || MACADDR=`cat /sys/class/net/eth1/address | tr a-z A-Z`
test -n "$MACADDR" || MACADDR=`head -c6 /dev/urandom | hexdump -e '/1 "%02X:"' | head -c17`
test -n "$MACADDR" || MACADDR=`head -c6 /dev/random | hexdump -e '/1 "%02X:"' | head -c17`

if [ "$role" = "controller" ]; then

	rm -rf /tmp/fakemesh_lck*

	# wireless.radio0.band='2g'
	wbandstr=$(uci show wireless | grep =\'${band}\'$ | head -n1)
	if test -n "$wbandstr"; then
		radio=$(echo $wbandstr | cut -d\. -f2) # radio0

		#meshx0
		uci set wireless.meshx0=wifi-iface
		uci set wireless.meshx0.device="${radio}"
		uci set wireless.meshx0.network='lan'
		uci set wireless.meshx0.ifname='meshx0'
		uci set wireless.meshx0.mode='ap'
		uci set wireless.meshx0.wds='1'
		uci set wireless.meshx0.ssid="${id}"
		uci set wireless.meshx0.hidden='1'
		if test -n "$key"; then
			uci set wireless.meshx0.encryption='psk2'
			uci set wireless.meshx0.key="${key}"
		else
			uci set wireless.meshx0.encryption='none'
		fi
		uci set wireless.meshx0.skip_inactivity_poll='1'
		uci set wireless.meshx0.wpa_group_rekey='0'
		uci set wireless.meshx0.wpa_pair_rekey='0'
		uci set wireless.meshx0.wpa_master_rekey='0'
		uci set wireless.meshx0.disassoc_low_ack='0'

		#meshx1
		uci delete wireless.meshx1 >/dev/null 2>&1

		uci set dhcp.lan.ignore='0'
		uci delete dhcp.meshx0 >/dev/null 2>&1
		uci delete network.meshx0 >/dev/null 2>&1

		# reload firewall
		uci get firewall.fakemesh >/dev/null 2>&1 || {
		uci -q batch <<-EOT
		delete firewall.fakemesh
		set firewall.fakemesh=include
		set firewall.fakemesh.type=script
		set firewall.fakemesh.path=/usr/share/fakemesh/firewall.include
		set firewall.fakemesh.family=any
		set firewall.fakemesh.reload=1
		commit firewall
		EOT
		}

		mkdir -p /usr/share/fakemesh
		cat >/tmp/fakemesh.firewall.include <<-EOT
#!/bin/sh
iptables -t nat -C prerouting_lan_rule -d $access_ip/32 -p tcp --dport 80 -j REDIRECT --to-ports 80 2>/dev/null || \
iptables -t nat -A prerouting_lan_rule -d $access_ip/32 -p tcp --dport 80 -j REDIRECT --to-ports 80
iptables -t nat -C prerouting_lan_rule -d $access_ip/32 -p tcp --dport 443 -j REDIRECT --to-ports 443 2>/dev/null || \
iptables -t nat -A prerouting_lan_rule -d $access_ip/32 -p tcp --dport 443 -j REDIRECT --to-ports 443

nft -a list chain inet fw4 dstnat | grep -o "fakemesh.*" | while read _ _ _ handle; do nft delete rule inet fw4 dstnat handle \$handle; done
nft insert rule inet fw4 dstnat iifname { \$(echo \$(fw4 -q zone lan | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } ip daddr $access_ip/32 tcp dport 80 counter redirect to :80 comment "fakemesh"
nft insert rule inet fw4 dstnat iifname { \$(echo \$(fw4 -q zone lan | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } ip daddr $access_ip/32 tcp dport 443 counter redirect to :443 comment "fakemesh"

EOT
		ln -s /tmp/fakemesh.firewall.include /usr/share/fakemesh/firewall.include 2>/dev/null
		grep -q "^sh /usr/share/fakemesh/firewall.include" /etc/firewall.include || echo "sh /usr/share/fakemesh/firewall.include" >>/etc/firewall.include

		grep -q "^$access_ip controller.fakemesh" /etc/hosts || {
			if grep -q ".* controller.fakemesh" /etc/hosts; then
				sed -i "s/.* controller.fakemesh/$access_ip controller.fakemesh/" /etc/hosts
			else
				echo "$access_ip controller.fakemesh" >>/etc/hosts
			fi
			/etc/init.d/dnsmasq reload
		}

		/etc/init.d/firewall restart >/dev/null 2>&1

		test $(uci changes | wc -l) -le 1 && {
			uci revert wireless
			uci revert dhcp
			uci revert network
			exit 0
		}

		uci commit wireless
		uci commit dhcp
		uci commit network

		(sleep 15
		 /etc/init.d/network reload
		 /etc/init.d/dnsmasq reload)&
	fi

	exec /usr/sbin/fakemesh gen_config
else

	# wireless.radio0.band='2g'
	wbandstr=$(uci show wireless | grep =\'${band}\'$ | head -n1)
	if test -n "$wbandstr"; then
		radio=$(echo $wbandstr | cut -d\. -f2) # radio0

		#meshx0
		uci set wireless.meshx0=wifi-iface
		uci set wireless.meshx0.device="${radio}"
		uci set wireless.meshx0.network='lan'
		uci set wireless.meshx0.ifname='meshx0'
		uci set wireless.meshx0.mode='ap'
		uci set wireless.meshx0.wds='1'
		uci set wireless.meshx0.ssid="${id}"
		uci set wireless.meshx0.hidden='1'
		if test -n "$key"; then
			uci set wireless.meshx0.encryption='psk2'
			uci set wireless.meshx0.key="${key}"
		else
			uci set wireless.meshx0.encryption='none'
		fi
		uci set wireless.meshx0.skip_inactivity_poll='1'
		uci set wireless.meshx0.wpa_group_rekey='0'
		uci set wireless.meshx0.wpa_pair_rekey='0'
		uci set wireless.meshx0.wpa_master_rekey='0'
		uci set wireless.meshx0.disassoc_low_ack='0'

		#meshx1
		uci set wireless.meshx1=wifi-iface
		uci set wireless.meshx1.device="${radio}"
		uci set wireless.meshx1.network='lan'
		uci set wireless.meshx1.ifname='meshx1'
		uci set wireless.meshx1.mode='sta'
		uci set wireless.meshx1.wds='1'
		uci set wireless.meshx1.ssid="${id}"
		if test -n "$key"; then
			uci set wireless.meshx1.encryption='psk2'
			uci set wireless.meshx1.key="${key}"
		else
			uci set wireless.meshx1.encryption='none'
		fi
		uci set wireless.meshx1.skip_inactivity_poll='1'
		uci set wireless.meshx1.wpa_group_rekey='0'
		uci set wireless.meshx1.wpa_pair_rekey='0'
		uci set wireless.meshx1.wpa_master_rekey='0'
		uci set wireless.meshx1.disassoc_low_ack='0'

		if [ "$band" = "5g" ]; then
			uci set wireless.${radio}.channel='36'
		else
			uci set wireless.${radio}.channel='1'
		fi

		uci set dhcp.lan.ignore='1'

		uci set dhcp.meshx0=dhcp
		uci set dhcp.meshx0.ignore='1'

		uci set network.meshx0=interface
		uci set network.meshx0.device="$(uci get network.lan.device)"
		uci set network.meshx0.proto='dhcp'
		uci set network.meshx0.defaultroute='1'
		uci set network.meshx0.metric='1000'
		uci set network.meshx0.hostname="MESH-AGENT_$(echo -n $MACADDR | sed 's/://g' | tr a-f A-F)"

		# reload firewall
		uci get firewall.fakemesh >/dev/null 2>&1 || {
		uci -q batch <<-EOT
		delete firewall.fakemesh
		set firewall.fakemesh=include
		set firewall.fakemesh.type=script
		set firewall.fakemesh.path=/usr/share/fakemesh/firewall.include
		set firewall.fakemesh.family=any
		set firewall.fakemesh.reload=1
		commit firewall
		EOT
		}

		mkdir -p /usr/share/fakemesh
		cat >/tmp/fakemesh.firewall.include <<-EOT
#!/bin/sh
iptables -t filter -C output_lan_rule -j MARK --set-xmark 0x00010000/0x00010000 2>/dev/null || \
iptables -t filter -A output_lan_rule -j MARK --set-xmark 0x00010000/0x00010000
iptables -t nat -C zone_lan_postrouting -m mark --mark 0x00010000/0x00010000 -j MASQUERADE 2>/dev/null || \
iptables -t nat -A zone_lan_postrouting -m mark --mark 0x00010000/0x00010000 -j MASQUERADE

nft -a list chain inet fw4 output_lan | grep -o "fakemesh_mark_0x10000.*" | while read _ _ _ handle; do nft delete rule inet fw4 output_lan handle \$handle; done
nft insert rule inet fw4 output_lan counter meta mark set mark or 0x10000 comment "fakemesh_mark_0x10000"

nft -a list chain inet fw4 srcnat | grep -o "fakemesh_mark_0x10000.*" | while read _ _ _ handle; do nft delete rule inet fw4 srcnat handle \$handle; done
nft insert rule inet fw4 srcnat oifname { \$(echo \$(fw4 -q zone lan | sort | uniq | sed 's/\(.*\)/"\1",/g') | sed 's/,$//') } mark and 0x10000 == 0x10000 counter masquerade comment "fakemesh_mark_0x10000"
EOT
		ln -s /tmp/fakemesh.firewall.include /usr/share/fakemesh/firewall.include 2>/dev/null
		grep -q "^sh /usr/share/fakemesh/firewall.include" /etc/firewall.include || echo "sh /usr/share/fakemesh/firewall.include" >>/etc/firewall.include

		/etc/init.d/firewall restart >/dev/null 2>&1

		test $(uci changes | wc -l) -le 5 && {
			uci revert wireless
			uci revert dhcp
			uci revert network

			agent_fix_channel &
			exit 0
		}

		uci commit wireless
		uci commit dhcp
		uci commit network
		sed -i "/.* controller.fakemesh/d" /etc/hosts

		(sleep 15
		 /etc/init.d/network reload
		 /etc/init.d/dnsmasq reload
		 agent_fix_channel)&
	fi
fi
